/* Generated By:JJTree&JavaCC: Do not edit this line. Xenon.java */
package xenon.parser.ast;
public class Xenon/*@bgen(jjtree)*/implements XenonTreeConstants, XenonConstants {/*@bgen(jjtree)*/
  protected JJTXenonState jjtree = new JJTXenonState();

/***********************************************
 *          THE GRAMMAR STARTS HERE            *
 ***********************************************/
  final public ASTCode code() throws ParseException {
 /*@bgen(jjtree) Code */
  ASTCode jjtn000 = new ASTCode(JJTCODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      statement();
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IF:
        case FOR:
        case FN:
        case RETURN:
        case NOT:
        case TRUE:
        case FALSE:
        case WHILE:
        case CLASS:
        case NEW:
        case FOREACH:
        case THIS:
        case GLOBAL:
        case NULL:
        case LAMBDA:
        case DEF:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case LBRACE:
        case LBRACKET:
        case PLUS:
        case SUBT:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        statement();
      }
      jj_consume_token(0);
                                                                  jjtree.closeNodeScope(jjtn000, true);
                                                                  jjtc000 = false;
                                                                 {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
                              if (jjtc000) {
                                jjtree.clearNodeScope(jjtn000);
                                jjtc000 = false;
                              } else {
                                jjtree.popNode();
                              }
                              if (jjte000 instanceof RuntimeException) {
                                {if (true) throw (RuntimeException)jjte000;}
                              }
                              if (jjte000 instanceof ParseException) {
                                {if (true) throw (ParseException)jjte000;}
                              }
                              {if (true) throw (Error)jjte000;}
    } finally {
                              if (jjtc000) {
                                jjtree.closeNodeScope(jjtn000, true);
                              }
    }
    throw new Error("Missing return statement in function");
  }

  final public void statement() throws ParseException {
 /*@bgen(jjtree) Statement */
  ASTStatement jjtn000 = new ASTStatement(JJTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CLASS:
        classdefinition();
        break;
      case FN:
        fndef();
        break;
      case LBRACE:
        block();
        break;
      case IF:
        ifstatement();
        break;
      case FOR:
        forloop();
        break;
      case FOREACH:
        foreachloop();
        break;
      case WHILE:
        whileloop();
        break;
      case NOT:
      case TRUE:
      case FALSE:
      case NEW:
      case THIS:
      case GLOBAL:
      case NULL:
      case LAMBDA:
      case DEF:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case LBRACKET:
      case PLUS:
      case SUBT:
        expression();
        break;
      case RETURN:
        returnexpr();
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
                                          if (jjtc000) {
                                            jjtree.clearNodeScope(jjtn000);
                                            jjtc000 = false;
                                          } else {
                                            jjtree.popNode();
                                          }
                                          if (jjte000 instanceof RuntimeException) {
                                            {if (true) throw (RuntimeException)jjte000;}
                                          }
                                          if (jjte000 instanceof ParseException) {
                                            {if (true) throw (ParseException)jjte000;}
                                          }
                                          {if (true) throw (Error)jjte000;}
    } finally {
                                          if (jjtc000) {
                                            jjtree.closeNodeScope(jjtn000, true);
                                          }
    }
  }

  final public void block() throws ParseException {
 /*@bgen(jjtree) Block */
  ASTBlock jjtn000 = new ASTBlock(JJTBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LBRACE);
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IF:
        case FOR:
        case FN:
        case RETURN:
        case NOT:
        case TRUE:
        case FALSE:
        case WHILE:
        case CLASS:
        case NEW:
        case FOREACH:
        case THIS:
        case GLOBAL:
        case NULL:
        case LAMBDA:
        case DEF:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case LBRACE:
        case LBRACKET:
        case PLUS:
        case SUBT:
          ;
          break;
        default:
          jj_la1[2] = jj_gen;
          break label_2;
        }
        statement();
      }
      jj_consume_token(RBRACE);
    } catch (Throwable jjte000) {
                                          if (jjtc000) {
                                            jjtree.clearNodeScope(jjtn000);
                                            jjtc000 = false;
                                          } else {
                                            jjtree.popNode();
                                          }
                                          if (jjte000 instanceof RuntimeException) {
                                            {if (true) throw (RuntimeException)jjte000;}
                                          }
                                          if (jjte000 instanceof ParseException) {
                                            {if (true) throw (ParseException)jjte000;}
                                          }
                                          {if (true) throw (Error)jjte000;}
    } finally {
                                          if (jjtc000) {
                                            jjtree.closeNodeScope(jjtn000, true);
                                          }
    }
  }

  final public void parmlist() throws ParseException {
 /*@bgen(jjtree) Parmlist */
  ASTParmlist jjtn000 = new ASTParmlist(JJTPARMLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        identifier();
        label_3:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[3] = jj_gen;
            break label_3;
          }
          jj_consume_token(COMMA);
          identifier();
        }
        break;
      default:
        jj_la1[4] = jj_gen;
        ;
      }
      jj_consume_token(RPAREN);
    } catch (Throwable jjte000) {
                                          if (jjtc000) {
                                            jjtree.clearNodeScope(jjtn000);
                                            jjtc000 = false;
                                          } else {
                                            jjtree.popNode();
                                          }
                                          if (jjte000 instanceof RuntimeException) {
                                            {if (true) throw (RuntimeException)jjte000;}
                                          }
                                          if (jjte000 instanceof ParseException) {
                                            {if (true) throw (ParseException)jjte000;}
                                          }
                                          {if (true) throw (Error)jjte000;}
    } finally {
                                          if (jjtc000) {
                                            jjtree.closeNodeScope(jjtn000, true);
                                          }
    }
  }

  final public void fnbody() throws ParseException {
 /*@bgen(jjtree) FnBody */
  ASTFnBody jjtn000 = new ASTFnBody(JJTFNBODY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IF:
        case FOR:
        case FN:
        case RETURN:
        case NOT:
        case TRUE:
        case FALSE:
        case WHILE:
        case CLASS:
        case NEW:
        case FOREACH:
        case THIS:
        case GLOBAL:
        case NULL:
        case LAMBDA:
        case DEF:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case LBRACE:
        case LBRACKET:
        case PLUS:
        case SUBT:
          ;
          break;
        default:
          jj_la1[5] = jj_gen;
          break label_4;
        }
        statement();
      }
    } catch (Throwable jjte000) {
                                          if (jjtc000) {
                                            jjtree.clearNodeScope(jjtn000);
                                            jjtc000 = false;
                                          } else {
                                            jjtree.popNode();
                                          }
                                          if (jjte000 instanceof RuntimeException) {
                                            {if (true) throw (RuntimeException)jjte000;}
                                          }
                                          if (jjte000 instanceof ParseException) {
                                            {if (true) throw (ParseException)jjte000;}
                                          }
                                          {if (true) throw (Error)jjte000;}
    } finally {
                                          if (jjtc000) {
                                            jjtree.closeNodeScope(jjtn000, true);
                                          }
    }
  }

  final public void fndef() throws ParseException {
 /*@bgen(jjtree) FnDef */
  ASTFnDef jjtn000 = new ASTFnDef(JJTFNDEF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(FN);
      identifier();
      parmlist();
      jj_consume_token(LBRACE);
      fnbody();
      jj_consume_token(RBRACE);
    } catch (Throwable jjte000) {
                                          if (jjtc000) {
                                            jjtree.clearNodeScope(jjtn000);
                                            jjtc000 = false;
                                          } else {
                                            jjtree.popNode();
                                          }
                                          if (jjte000 instanceof RuntimeException) {
                                            {if (true) throw (RuntimeException)jjte000;}
                                          }
                                          if (jjte000 instanceof ParseException) {
                                            {if (true) throw (ParseException)jjte000;}
                                          }
                                          {if (true) throw (Error)jjte000;}
    } finally {
                                          if (jjtc000) {
                                            jjtree.closeNodeScope(jjtn000, true);
                                          }
    }
  }

  final public void classdefinition() throws ParseException {
 /*@bgen(jjtree) ClassDef */
  ASTClassDef jjtn000 = new ASTClassDef(JJTCLASSDEF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(CLASS);
      identifier();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        parentlist();
        break;
      default:
        jj_la1[6] = jj_gen;
        ;
      }
      block();
    } catch (Throwable jjte000) {
                                          if (jjtc000) {
                                            jjtree.clearNodeScope(jjtn000);
                                            jjtc000 = false;
                                          } else {
                                            jjtree.popNode();
                                          }
                                          if (jjte000 instanceof RuntimeException) {
                                            {if (true) throw (RuntimeException)jjte000;}
                                          }
                                          if (jjte000 instanceof ParseException) {
                                            {if (true) throw (ParseException)jjte000;}
                                          }
                                          {if (true) throw (Error)jjte000;}
    } finally {
                                          if (jjtc000) {
                                            jjtree.closeNodeScope(jjtn000, true);
                                          }
    }
  }

  final public void returnexpr() throws ParseException {
 /*@bgen(jjtree) ReturnExpression */
  ASTReturnExpression jjtn000 = new ASTReturnExpression(JJTRETURNEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(RETURN);
      expression();
    } catch (Throwable jjte000) {
                                          if (jjtc000) {
                                            jjtree.clearNodeScope(jjtn000);
                                            jjtc000 = false;
                                          } else {
                                            jjtree.popNode();
                                          }
                                          if (jjte000 instanceof RuntimeException) {
                                            {if (true) throw (RuntimeException)jjte000;}
                                          }
                                          if (jjte000 instanceof ParseException) {
                                            {if (true) throw (ParseException)jjte000;}
                                          }
                                          {if (true) throw (Error)jjte000;}
    } finally {
                                          if (jjtc000) {
                                            jjtree.closeNodeScope(jjtn000, true);
                                          }
    }
  }

  final public void ifstatement() throws ParseException {
 /*@bgen(jjtree) IfStatement */
  ASTIfStatement jjtn000 = new ASTIfStatement(JJTIFSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(IF);
      jj_consume_token(LPAREN);
      expression();
      jj_consume_token(RPAREN);
      statement();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ELSE:
        jj_consume_token(ELSE);
        statement();
                                                                           jjtn000.ifHasElse = true;
        break;
      default:
        jj_la1[7] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
                                          if (jjtc000) {
                                            jjtree.clearNodeScope(jjtn000);
                                            jjtc000 = false;
                                          } else {
                                            jjtree.popNode();
                                          }
                                          if (jjte000 instanceof RuntimeException) {
                                            {if (true) throw (RuntimeException)jjte000;}
                                          }
                                          if (jjte000 instanceof ParseException) {
                                            {if (true) throw (ParseException)jjte000;}
                                          }
                                          {if (true) throw (Error)jjte000;}
    } finally {
                                          if (jjtc000) {
                                            jjtree.closeNodeScope(jjtn000, true);
                                          }
    }
  }

  final public void forloop() throws ParseException {
 /*@bgen(jjtree) ForLoop */
  ASTForLoop jjtn000 = new ASTForLoop(JJTFORLOOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(FOR);
      jj_consume_token(LPAREN);
      expression();
      jj_consume_token(SEMICOLON);
      expression();
      jj_consume_token(SEMICOLON);
      expression();
      jj_consume_token(RPAREN);
      statement();
    } catch (Throwable jjte000) {
                                          if (jjtc000) {
                                            jjtree.clearNodeScope(jjtn000);
                                            jjtc000 = false;
                                          } else {
                                            jjtree.popNode();
                                          }
                                          if (jjte000 instanceof RuntimeException) {
                                            {if (true) throw (RuntimeException)jjte000;}
                                          }
                                          if (jjte000 instanceof ParseException) {
                                            {if (true) throw (ParseException)jjte000;}
                                          }
                                          {if (true) throw (Error)jjte000;}
    } finally {
                                          if (jjtc000) {
                                            jjtree.closeNodeScope(jjtn000, true);
                                          }
    }
  }

  final public void foreachloop() throws ParseException {
 /*@bgen(jjtree) ForEachLoop */
  ASTForEachLoop jjtn000 = new ASTForEachLoop(JJTFOREACHLOOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(FOREACH);
      jj_consume_token(LPAREN);
      expression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        jj_consume_token(COMMA);
        expression();
        break;
      default:
        jj_la1[8] = jj_gen;
        ;
      }
      jj_consume_token(IN);
      expression();
      jj_consume_token(RPAREN);
      statement();
    } catch (Throwable jjte000) {
                                          if (jjtc000) {
                                            jjtree.clearNodeScope(jjtn000);
                                            jjtc000 = false;
                                          } else {
                                            jjtree.popNode();
                                          }
                                          if (jjte000 instanceof RuntimeException) {
                                            {if (true) throw (RuntimeException)jjte000;}
                                          }
                                          if (jjte000 instanceof ParseException) {
                                            {if (true) throw (ParseException)jjte000;}
                                          }
                                          {if (true) throw (Error)jjte000;}
    } finally {
                                          if (jjtc000) {
                                            jjtree.closeNodeScope(jjtn000, true);
                                          }
    }
  }

  final public void whileloop() throws ParseException {
 /*@bgen(jjtree) WhileLoop */
  ASTWhileLoop jjtn000 = new ASTWhileLoop(JJTWHILELOOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(WHILE);
      jj_consume_token(LPAREN);
      expression();
      jj_consume_token(RPAREN);
      statement();
    } catch (Throwable jjte000) {
                                          if (jjtc000) {
                                            jjtree.clearNodeScope(jjtn000);
                                            jjtc000 = false;
                                          } else {
                                            jjtree.popNode();
                                          }
                                          if (jjte000 instanceof RuntimeException) {
                                            {if (true) throw (RuntimeException)jjte000;}
                                          }
                                          if (jjte000 instanceof ParseException) {
                                            {if (true) throw (ParseException)jjte000;}
                                          }
                                          {if (true) throw (Error)jjte000;}
    } finally {
                                          if (jjtc000) {
                                            jjtree.closeNodeScope(jjtn000, true);
                                          }
    }
  }

  final public void parentlist() throws ParseException {
 /*@bgen(jjtree) ReferenceList */
  ASTReferenceList jjtn000 = new ASTReferenceList(JJTREFERENCELIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NOT:
      case TRUE:
      case FALSE:
      case NEW:
      case THIS:
      case GLOBAL:
      case NULL:
      case LAMBDA:
      case DEF:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case LBRACKET:
      case PLUS:
      case SUBT:
        expression();
        label_5:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[9] = jj_gen;
            break label_5;
          }
          jj_consume_token(COMMA);
          expression();
        }
        break;
      default:
        jj_la1[10] = jj_gen;
        ;
      }
      jj_consume_token(RPAREN);
    } catch (Throwable jjte000) {
                                          if (jjtc000) {
                                            jjtree.clearNodeScope(jjtn000);
                                            jjtc000 = false;
                                          } else {
                                            jjtree.popNode();
                                          }
                                          if (jjte000 instanceof RuntimeException) {
                                            {if (true) throw (RuntimeException)jjte000;}
                                          }
                                          if (jjte000 instanceof ParseException) {
                                            {if (true) throw (ParseException)jjte000;}
                                          }
                                          {if (true) throw (Error)jjte000;}
    } finally {
                                          if (jjtc000) {
                                            jjtree.closeNodeScope(jjtn000, true);
                                          }
    }
  }

  final public void arglist() throws ParseException {
 /*@bgen(jjtree) ArgList */
  ASTArgList jjtn000 = new ASTArgList(JJTARGLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NOT:
      case TRUE:
      case FALSE:
      case NEW:
      case THIS:
      case GLOBAL:
      case NULL:
      case LAMBDA:
      case DEF:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case LBRACKET:
      case PLUS:
      case SUBT:
        expression();
        label_6:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[11] = jj_gen;
            break label_6;
          }
          jj_consume_token(COMMA);
          expression();
        }
        break;
      default:
        jj_la1[12] = jj_gen;
        ;
      }
      jj_consume_token(RPAREN);
    } catch (Throwable jjte000) {
                                          if (jjtc000) {
                                            jjtree.clearNodeScope(jjtn000);
                                            jjtc000 = false;
                                          } else {
                                            jjtree.popNode();
                                          }
                                          if (jjte000 instanceof RuntimeException) {
                                            {if (true) throw (RuntimeException)jjte000;}
                                          }
                                          if (jjte000 instanceof ParseException) {
                                            {if (true) throw (ParseException)jjte000;}
                                          }
                                          {if (true) throw (Error)jjte000;}
    } finally {
                                          if (jjtc000) {
                                            jjtree.closeNodeScope(jjtn000, true);
                                          }
    }
  }

  final public void sqrbracketlist() throws ParseException {
 /*@bgen(jjtree) ArgList */
  ASTArgList jjtn000 = new ASTArgList(JJTARGLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LBRACKET);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NOT:
      case TRUE:
      case FALSE:
      case NEW:
      case THIS:
      case GLOBAL:
      case NULL:
      case LAMBDA:
      case DEF:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case LBRACKET:
      case PLUS:
      case SUBT:
        expression();
        label_7:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[13] = jj_gen;
            break label_7;
          }
          jj_consume_token(COMMA);
          expression();
        }
        break;
      default:
        jj_la1[14] = jj_gen;
        ;
      }
      jj_consume_token(RBRACKET);
    } catch (Throwable jjte000) {
                                          if (jjtc000) {
                                            jjtree.clearNodeScope(jjtn000);
                                            jjtc000 = false;
                                          } else {
                                            jjtree.popNode();
                                          }
                                          if (jjte000 instanceof RuntimeException) {
                                            {if (true) throw (RuntimeException)jjte000;}
                                          }
                                          if (jjte000 instanceof ParseException) {
                                            {if (true) throw (ParseException)jjte000;}
                                          }
                                          {if (true) throw (Error)jjte000;}
    } finally {
                                          if (jjtc000) {
                                            jjtree.closeNodeScope(jjtn000, true);
                                          }
    }
  }

//
// Expressions
//
  final public void expression() throws ParseException {
    assignment_expression();
  }

  final public void assignment_expression() throws ParseException {
    or_expression();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSIGN:
      case PEQ:
      case MEQ:
        ;
        break;
      default:
        jj_la1[15] = jj_gen;
        break label_8;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSIGN:
        jj_consume_token(ASSIGN);
                                                                ASTAssignment jjtn001 = new ASTAssignment(JJTASSIGNMENT);
                                                                boolean jjtc001 = true;
                                                                jjtree.openNodeScope(jjtn001);
        try {
          expression();
        } catch (Throwable jjte001) {
                                                                if (jjtc001) {
                                                                  jjtree.clearNodeScope(jjtn001);
                                                                  jjtc001 = false;
                                                                } else {
                                                                  jjtree.popNode();
                                                                }
                                                                if (jjte001 instanceof RuntimeException) {
                                                                  {if (true) throw (RuntimeException)jjte001;}
                                                                }
                                                                if (jjte001 instanceof ParseException) {
                                                                  {if (true) throw (ParseException)jjte001;}
                                                                }
                                                                {if (true) throw (Error)jjte001;}
        } finally {
                                                                if (jjtc001) {
                                                                  jjtree.closeNodeScope(jjtn001,  2);
                                                                }
        }
        break;
      case PEQ:
        jj_consume_token(PEQ);
                                                                 ASTAssignIncrement jjtn002 = new ASTAssignIncrement(JJTASSIGNINCREMENT);
                                                                 boolean jjtc002 = true;
                                                                 jjtree.openNodeScope(jjtn002);
        try {
          expression();
        } catch (Throwable jjte002) {
                                                                 if (jjtc002) {
                                                                   jjtree.clearNodeScope(jjtn002);
                                                                   jjtc002 = false;
                                                                 } else {
                                                                   jjtree.popNode();
                                                                 }
                                                                 if (jjte002 instanceof RuntimeException) {
                                                                   {if (true) throw (RuntimeException)jjte002;}
                                                                 }
                                                                 if (jjte002 instanceof ParseException) {
                                                                   {if (true) throw (ParseException)jjte002;}
                                                                 }
                                                                 {if (true) throw (Error)jjte002;}
        } finally {
                                                                 if (jjtc002) {
                                                                   jjtree.closeNodeScope(jjtn002,  2);
                                                                 }
        }
        break;
      case MEQ:
        jj_consume_token(MEQ);
                                                                 ASTAssignDecrement jjtn003 = new ASTAssignDecrement(JJTASSIGNDECREMENT);
                                                                 boolean jjtc003 = true;
                                                                 jjtree.openNodeScope(jjtn003);
        try {
          expression();
        } catch (Throwable jjte003) {
                                                                 if (jjtc003) {
                                                                   jjtree.clearNodeScope(jjtn003);
                                                                   jjtc003 = false;
                                                                 } else {
                                                                   jjtree.popNode();
                                                                 }
                                                                 if (jjte003 instanceof RuntimeException) {
                                                                   {if (true) throw (RuntimeException)jjte003;}
                                                                 }
                                                                 if (jjte003 instanceof ParseException) {
                                                                   {if (true) throw (ParseException)jjte003;}
                                                                 }
                                                                 {if (true) throw (Error)jjte003;}
        } finally {
                                                                 if (jjtc003) {
                                                                   jjtree.closeNodeScope(jjtn003,  2);
                                                                 }
        }
        break;
      default:
        jj_la1[16] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void or_expression() throws ParseException {
    and_expression();
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        ;
        break;
      default:
        jj_la1[17] = jj_gen;
        break label_9;
      }
      jj_consume_token(OR);
                                                        ASTOr jjtn001 = new ASTOr(JJTOR);
                                                        boolean jjtc001 = true;
                                                        jjtree.openNodeScope(jjtn001);
      try {
        and_expression();
      } catch (Throwable jjte001) {
                                                        if (jjtc001) {
                                                          jjtree.clearNodeScope(jjtn001);
                                                          jjtc001 = false;
                                                        } else {
                                                          jjtree.popNode();
                                                        }
                                                        if (jjte001 instanceof RuntimeException) {
                                                          {if (true) throw (RuntimeException)jjte001;}
                                                        }
                                                        if (jjte001 instanceof ParseException) {
                                                          {if (true) throw (ParseException)jjte001;}
                                                        }
                                                        {if (true) throw (Error)jjte001;}
      } finally {
                                                        if (jjtc001) {
                                                          jjtree.closeNodeScope(jjtn001,  2);
                                                        }
      }
    }
  }

  final public void and_expression() throws ParseException {
    compare_expression();
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        ;
        break;
      default:
        jj_la1[18] = jj_gen;
        break label_10;
      }
      jj_consume_token(AND);
                                                             ASTAnd jjtn001 = new ASTAnd(JJTAND);
                                                             boolean jjtc001 = true;
                                                             jjtree.openNodeScope(jjtn001);
      try {
        compare_expression();
      } catch (Throwable jjte001) {
                                                             if (jjtc001) {
                                                               jjtree.clearNodeScope(jjtn001);
                                                               jjtc001 = false;
                                                             } else {
                                                               jjtree.popNode();
                                                             }
                                                             if (jjte001 instanceof RuntimeException) {
                                                               {if (true) throw (RuntimeException)jjte001;}
                                                             }
                                                             if (jjte001 instanceof ParseException) {
                                                               {if (true) throw (ParseException)jjte001;}
                                                             }
                                                             {if (true) throw (Error)jjte001;}
      } finally {
                                                             if (jjtc001) {
                                                               jjtree.closeNodeScope(jjtn001,  2);
                                                             }
      }
    }
  }

  final public void compare_expression() throws ParseException {
    add_expression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQ:
    case GT:
    case LT:
    case LE:
    case GE:
    case NE:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
        jj_consume_token(EQ);
                                         ASTCompEqual jjtn001 = new ASTCompEqual(JJTCOMPEQUAL);
                                         boolean jjtc001 = true;
                                         jjtree.openNodeScope(jjtn001);
        try {
          add_expression();
        } catch (Throwable jjte001) {
                                         if (jjtc001) {
                                           jjtree.clearNodeScope(jjtn001);
                                           jjtc001 = false;
                                         } else {
                                           jjtree.popNode();
                                         }
                                         if (jjte001 instanceof RuntimeException) {
                                           {if (true) throw (RuntimeException)jjte001;}
                                         }
                                         if (jjte001 instanceof ParseException) {
                                           {if (true) throw (ParseException)jjte001;}
                                         }
                                         {if (true) throw (Error)jjte001;}
        } finally {
                                         if (jjtc001) {
                                           jjtree.closeNodeScope(jjtn001,  2);
                                         }
        }
        break;
      case NE:
        jj_consume_token(NE);
                                        ASTCompNequal jjtn002 = new ASTCompNequal(JJTCOMPNEQUAL);
                                        boolean jjtc002 = true;
                                        jjtree.openNodeScope(jjtn002);
        try {
          add_expression();
        } catch (Throwable jjte002) {
                                        if (jjtc002) {
                                          jjtree.clearNodeScope(jjtn002);
                                          jjtc002 = false;
                                        } else {
                                          jjtree.popNode();
                                        }
                                        if (jjte002 instanceof RuntimeException) {
                                          {if (true) throw (RuntimeException)jjte002;}
                                        }
                                        if (jjte002 instanceof ParseException) {
                                          {if (true) throw (ParseException)jjte002;}
                                        }
                                        {if (true) throw (Error)jjte002;}
        } finally {
                                        if (jjtc002) {
                                          jjtree.closeNodeScope(jjtn002,  2);
                                        }
        }
        break;
      case GE:
        jj_consume_token(GE);
                                        ASTCompGTE jjtn003 = new ASTCompGTE(JJTCOMPGTE);
                                        boolean jjtc003 = true;
                                        jjtree.openNodeScope(jjtn003);
        try {
          add_expression();
        } catch (Throwable jjte003) {
                                        if (jjtc003) {
                                          jjtree.clearNodeScope(jjtn003);
                                          jjtc003 = false;
                                        } else {
                                          jjtree.popNode();
                                        }
                                        if (jjte003 instanceof RuntimeException) {
                                          {if (true) throw (RuntimeException)jjte003;}
                                        }
                                        if (jjte003 instanceof ParseException) {
                                          {if (true) throw (ParseException)jjte003;}
                                        }
                                        {if (true) throw (Error)jjte003;}
        } finally {
                                        if (jjtc003) {
                                          jjtree.closeNodeScope(jjtn003,  2);
                                        }
        }
        break;
      case LE:
        jj_consume_token(LE);
                                        ASTCompLTE jjtn004 = new ASTCompLTE(JJTCOMPLTE);
                                        boolean jjtc004 = true;
                                        jjtree.openNodeScope(jjtn004);
        try {
          add_expression();
        } catch (Throwable jjte004) {
                                        if (jjtc004) {
                                          jjtree.clearNodeScope(jjtn004);
                                          jjtc004 = false;
                                        } else {
                                          jjtree.popNode();
                                        }
                                        if (jjte004 instanceof RuntimeException) {
                                          {if (true) throw (RuntimeException)jjte004;}
                                        }
                                        if (jjte004 instanceof ParseException) {
                                          {if (true) throw (ParseException)jjte004;}
                                        }
                                        {if (true) throw (Error)jjte004;}
        } finally {
                                        if (jjtc004) {
                                          jjtree.closeNodeScope(jjtn004,  2);
                                        }
        }
        break;
      case GT:
        jj_consume_token(GT);
                                        ASTCompGT jjtn005 = new ASTCompGT(JJTCOMPGT);
                                        boolean jjtc005 = true;
                                        jjtree.openNodeScope(jjtn005);
        try {
          add_expression();
        } catch (Throwable jjte005) {
                                        if (jjtc005) {
                                          jjtree.clearNodeScope(jjtn005);
                                          jjtc005 = false;
                                        } else {
                                          jjtree.popNode();
                                        }
                                        if (jjte005 instanceof RuntimeException) {
                                          {if (true) throw (RuntimeException)jjte005;}
                                        }
                                        if (jjte005 instanceof ParseException) {
                                          {if (true) throw (ParseException)jjte005;}
                                        }
                                        {if (true) throw (Error)jjte005;}
        } finally {
                                        if (jjtc005) {
                                          jjtree.closeNodeScope(jjtn005,  2);
                                        }
        }
        break;
      case LT:
        jj_consume_token(LT);
                                        ASTCompLT jjtn006 = new ASTCompLT(JJTCOMPLT);
                                        boolean jjtc006 = true;
                                        jjtree.openNodeScope(jjtn006);
        try {
          add_expression();
        } catch (Throwable jjte006) {
                                        if (jjtc006) {
                                          jjtree.clearNodeScope(jjtn006);
                                          jjtc006 = false;
                                        } else {
                                          jjtree.popNode();
                                        }
                                        if (jjte006 instanceof RuntimeException) {
                                          {if (true) throw (RuntimeException)jjte006;}
                                        }
                                        if (jjte006 instanceof ParseException) {
                                          {if (true) throw (ParseException)jjte006;}
                                        }
                                        {if (true) throw (Error)jjte006;}
        } finally {
                                        if (jjtc006) {
                                          jjtree.closeNodeScope(jjtn006,  2);
                                        }
        }
        break;
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[20] = jj_gen;
      ;
    }
  }

  final public void add_expression() throws ParseException {
    mul_expression();
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case SUBT:
        ;
        break;
      default:
        jj_la1[21] = jj_gen;
        break label_11;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
                                         ASTAdd jjtn001 = new ASTAdd(JJTADD);
                                         boolean jjtc001 = true;
                                         jjtree.openNodeScope(jjtn001);
        try {
          mul_expression();
        } catch (Throwable jjte001) {
                                         if (jjtc001) {
                                           jjtree.clearNodeScope(jjtn001);
                                           jjtc001 = false;
                                         } else {
                                           jjtree.popNode();
                                         }
                                         if (jjte001 instanceof RuntimeException) {
                                           {if (true) throw (RuntimeException)jjte001;}
                                         }
                                         if (jjte001 instanceof ParseException) {
                                           {if (true) throw (ParseException)jjte001;}
                                         }
                                         {if (true) throw (Error)jjte001;}
        } finally {
                                         if (jjtc001) {
                                           jjtree.closeNodeScope(jjtn001,  2);
                                         }
        }
        break;
      case SUBT:
        jj_consume_token(SUBT);
                                         ASTSubtract jjtn002 = new ASTSubtract(JJTSUBTRACT);
                                         boolean jjtc002 = true;
                                         jjtree.openNodeScope(jjtn002);
        try {
          mul_expression();
        } catch (Throwable jjte002) {
                                         if (jjtc002) {
                                           jjtree.clearNodeScope(jjtn002);
                                           jjtc002 = false;
                                         } else {
                                           jjtree.popNode();
                                         }
                                         if (jjte002 instanceof RuntimeException) {
                                           {if (true) throw (RuntimeException)jjte002;}
                                         }
                                         if (jjte002 instanceof ParseException) {
                                           {if (true) throw (ParseException)jjte002;}
                                         }
                                         {if (true) throw (Error)jjte002;}
        } finally {
                                         if (jjtc002) {
                                           jjtree.closeNodeScope(jjtn002,  2);
                                         }
        }
        break;
      default:
        jj_la1[22] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void mul_expression() throws ParseException {
    unary_expression();
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
      case SLASH:
      case REM:
        ;
        break;
      default:
        jj_la1[23] = jj_gen;
        break label_12;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
        jj_consume_token(STAR);
                                        ASTTimes jjtn001 = new ASTTimes(JJTTIMES);
                                        boolean jjtc001 = true;
                                        jjtree.openNodeScope(jjtn001);
        try {
          unary_expression();
        } catch (Throwable jjte001) {
                                        if (jjtc001) {
                                          jjtree.clearNodeScope(jjtn001);
                                          jjtc001 = false;
                                        } else {
                                          jjtree.popNode();
                                        }
                                        if (jjte001 instanceof RuntimeException) {
                                          {if (true) throw (RuntimeException)jjte001;}
                                        }
                                        if (jjte001 instanceof ParseException) {
                                          {if (true) throw (ParseException)jjte001;}
                                        }
                                        {if (true) throw (Error)jjte001;}
        } finally {
                                        if (jjtc001) {
                                          jjtree.closeNodeScope(jjtn001,  2);
                                        }
        }
        break;
      case SLASH:
        jj_consume_token(SLASH);
                                        ASTDivide jjtn002 = new ASTDivide(JJTDIVIDE);
                                        boolean jjtc002 = true;
                                        jjtree.openNodeScope(jjtn002);
        try {
          unary_expression();
        } catch (Throwable jjte002) {
                                        if (jjtc002) {
                                          jjtree.clearNodeScope(jjtn002);
                                          jjtc002 = false;
                                        } else {
                                          jjtree.popNode();
                                        }
                                        if (jjte002 instanceof RuntimeException) {
                                          {if (true) throw (RuntimeException)jjte002;}
                                        }
                                        if (jjte002 instanceof ParseException) {
                                          {if (true) throw (ParseException)jjte002;}
                                        }
                                        {if (true) throw (Error)jjte002;}
        } finally {
                                        if (jjtc002) {
                                          jjtree.closeNodeScope(jjtn002,  2);
                                        }
        }
        break;
      case REM:
        jj_consume_token(REM);
                                        ASTModule jjtn003 = new ASTModule(JJTMODULE);
                                        boolean jjtc003 = true;
                                        jjtree.openNodeScope(jjtn003);
        try {
          unary_expression();
        } catch (Throwable jjte003) {
                                        if (jjtc003) {
                                          jjtree.clearNodeScope(jjtn003);
                                          jjtc003 = false;
                                        } else {
                                          jjtree.popNode();
                                        }
                                        if (jjte003 instanceof RuntimeException) {
                                          {if (true) throw (RuntimeException)jjte003;}
                                        }
                                        if (jjte003 instanceof ParseException) {
                                          {if (true) throw (ParseException)jjte003;}
                                        }
                                        {if (true) throw (Error)jjte003;}
        } finally {
                                        if (jjtc003) {
                                          jjtree.closeNodeScope(jjtn003,  2);
                                        }
        }
        break;
      default:
        jj_la1[24] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void unary_expression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
      jj_consume_token(NOT);
                                      ASTUnaryNot jjtn001 = new ASTUnaryNot(JJTUNARYNOT);
                                      boolean jjtc001 = true;
                                      jjtree.openNodeScope(jjtn001);
      try {
        unary_expression();
      } catch (Throwable jjte001) {
                                      if (jjtc001) {
                                        jjtree.clearNodeScope(jjtn001);
                                        jjtc001 = false;
                                      } else {
                                        jjtree.popNode();
                                      }
                                      if (jjte001 instanceof RuntimeException) {
                                        {if (true) throw (RuntimeException)jjte001;}
                                      }
                                      if (jjte001 instanceof ParseException) {
                                        {if (true) throw (ParseException)jjte001;}
                                      }
                                      {if (true) throw (Error)jjte001;}
      } finally {
                                      if (jjtc001) {
                                        jjtree.closeNodeScope(jjtn001,  1);
                                      }
      }
      break;
    case PLUS:
      jj_consume_token(PLUS);
                                      ASTUnaryPlus jjtn002 = new ASTUnaryPlus(JJTUNARYPLUS);
                                      boolean jjtc002 = true;
                                      jjtree.openNodeScope(jjtn002);
      try {
        unary_expression();
      } catch (Throwable jjte002) {
                                      if (jjtc002) {
                                        jjtree.clearNodeScope(jjtn002);
                                        jjtc002 = false;
                                      } else {
                                        jjtree.popNode();
                                      }
                                      if (jjte002 instanceof RuntimeException) {
                                        {if (true) throw (RuntimeException)jjte002;}
                                      }
                                      if (jjte002 instanceof ParseException) {
                                        {if (true) throw (ParseException)jjte002;}
                                      }
                                      {if (true) throw (Error)jjte002;}
      } finally {
                                      if (jjtc002) {
                                        jjtree.closeNodeScope(jjtn002,  1);
                                      }
      }
      break;
    case SUBT:
      jj_consume_token(SUBT);
                                      ASTUnaryMinus jjtn003 = new ASTUnaryMinus(JJTUNARYMINUS);
                                      boolean jjtc003 = true;
                                      jjtree.openNodeScope(jjtn003);
      try {
        unary_expression();
      } catch (Throwable jjte003) {
                                      if (jjtc003) {
                                        jjtree.clearNodeScope(jjtn003);
                                        jjtc003 = false;
                                      } else {
                                        jjtree.popNode();
                                      }
                                      if (jjte003 instanceof RuntimeException) {
                                        {if (true) throw (RuntimeException)jjte003;}
                                      }
                                      if (jjte003 instanceof ParseException) {
                                        {if (true) throw (ParseException)jjte003;}
                                      }
                                      {if (true) throw (Error)jjte003;}
      } finally {
                                      if (jjtc003) {
                                        jjtree.closeNodeScope(jjtn003,  1);
                                      }
      }
      break;
    case TRUE:
    case FALSE:
    case NEW:
    case THIS:
    case GLOBAL:
    case NULL:
    case LAMBDA:
    case DEF:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case LBRACKET:
      dot_expression();
      break;
    default:
      jj_la1[25] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void dot_expression() throws ParseException {
    functioncall();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOT:
      jj_consume_token(DOT);
                                                                                 ASTDotExpression jjtn001 = new ASTDotExpression(JJTDOTEXPRESSION);
                                                                                 boolean jjtc001 = true;
                                                                                 jjtree.openNodeScope(jjtn001);
      try {
        dot_expression();
      } catch (Throwable jjte001) {
                                                                                 if (jjtc001) {
                                                                                   jjtree.clearNodeScope(jjtn001);
                                                                                   jjtc001 = false;
                                                                                 } else {
                                                                                   jjtree.popNode();
                                                                                 }
                                                                                 if (jjte001 instanceof RuntimeException) {
                                                                                   {if (true) throw (RuntimeException)jjte001;}
                                                                                 }
                                                                                 if (jjte001 instanceof ParseException) {
                                                                                   {if (true) throw (ParseException)jjte001;}
                                                                                 }
                                                                                 {if (true) throw (Error)jjte001;}
      } finally {
                                                                                 if (jjtc001) {
                                                                                   jjtree.closeNodeScope(jjtn001,  2);
                                                                                 }
      }
      break;
    default:
      jj_la1[26] = jj_gen;
      ;
    }
  }

  final public void functioncall() throws ParseException {
    primary_expression();
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
      case LBRACKET:
      case PP:
      case MM:
        ;
        break;
      default:
        jj_la1[27] = jj_gen;
        break label_13;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
                                 ASTFnInvoke jjtn001 = new ASTFnInvoke(JJTFNINVOKE);
                                 boolean jjtc001 = true;
                                 jjtree.openNodeScope(jjtn001);
        try {
          arglist();
        } catch (Throwable jjte001) {
                                 if (jjtc001) {
                                   jjtree.clearNodeScope(jjtn001);
                                   jjtc001 = false;
                                 } else {
                                   jjtree.popNode();
                                 }
                                 if (jjte001 instanceof RuntimeException) {
                                   {if (true) throw (RuntimeException)jjte001;}
                                 }
                                 if (jjte001 instanceof ParseException) {
                                   {if (true) throw (ParseException)jjte001;}
                                 }
                                 {if (true) throw (Error)jjte001;}
        } finally {
                                 if (jjtc001) {
                                   jjtree.closeNodeScope(jjtn001,  2);
                                 }
        }
        break;
      case PP:
                                 ASTUnaryIncrement jjtn002 = new ASTUnaryIncrement(JJTUNARYINCREMENT);
                                 boolean jjtc002 = true;
                                 jjtree.openNodeScope(jjtn002);
        try {
          jj_consume_token(PP);
        } finally {
                                 if (jjtc002) {
                                   jjtree.closeNodeScope(jjtn002,  1);
                                 }
        }
        break;
      case MM:
                                 ASTUnaryDecrement jjtn003 = new ASTUnaryDecrement(JJTUNARYDECREMENT);
                                 boolean jjtc003 = true;
                                 jjtree.openNodeScope(jjtn003);
        try {
          jj_consume_token(MM);
        } finally {
                                 if (jjtc003) {
                                   jjtree.closeNodeScope(jjtn003,  1);
                                 }
        }
        break;
      case LBRACKET:
                                 ASTSqrBrackets jjtn004 = new ASTSqrBrackets(JJTSQRBRACKETS);
                                 boolean jjtc004 = true;
                                 jjtree.openNodeScope(jjtn004);
        try {
          sqrbracketlist();
        } catch (Throwable jjte004) {
                                 if (jjtc004) {
                                   jjtree.clearNodeScope(jjtn004);
                                   jjtc004 = false;
                                 } else {
                                   jjtree.popNode();
                                 }
                                 if (jjte004 instanceof RuntimeException) {
                                   {if (true) throw (RuntimeException)jjte004;}
                                 }
                                 if (jjte004 instanceof ParseException) {
                                   {if (true) throw (ParseException)jjte004;}
                                 }
                                 {if (true) throw (Error)jjte004;}
        } finally {
                                 if (jjtc004) {
                                   jjtree.closeNodeScope(jjtn004,  2);
                                 }
        }
        break;
      default:
        jj_la1[28] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void primary_expression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
      jj_consume_token(LPAREN);
      expression();
      jj_consume_token(RPAREN);
      break;
    case TRUE:
    case FALSE:
    case THIS:
    case GLOBAL:
    case NULL:
    case LAMBDA:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case STRING_LITERAL:
    case LBRACKET:
      literal();
      break;
    case IDENTIFIER:
      variable();
      break;
    case NEW:
      newobject();
      break;
    case DEF:
      localvardef();
      break;
    default:
      jj_la1[29] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void literal() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
      integer();
      break;
    case STRING_LITERAL:
      character();
      break;
    case FLOATING_POINT_LITERAL:
      rational();
      break;
    case TRUE:
    case FALSE:
      bool();
      break;
    case THIS:
    case GLOBAL:
      pointers();
      break;
    case NULL:
      nullliteral();
      break;
    case LAMBDA:
      lambda();
      break;
    case LBRACKET:
      vectorliteral();
      break;
    default:
      jj_la1[30] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void classVar() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      variable();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT:
        jj_consume_token(DOT);
                                                                               ASTDotExpression jjtn001 = new ASTDotExpression(JJTDOTEXPRESSION);
                                                                               boolean jjtc001 = true;
                                                                               jjtree.openNodeScope(jjtn001);
        try {
          classVar();
        } catch (Throwable jjte001) {
                                                                               if (jjtc001) {
                                                                                 jjtree.clearNodeScope(jjtn001);
                                                                                 jjtc001 = false;
                                                                               } else {
                                                                                 jjtree.popNode();
                                                                               }
                                                                               if (jjte001 instanceof RuntimeException) {
                                                                                 {if (true) throw (RuntimeException)jjte001;}
                                                                               }
                                                                               if (jjte001 instanceof ParseException) {
                                                                                 {if (true) throw (ParseException)jjte001;}
                                                                               }
                                                                               {if (true) throw (Error)jjte001;}
        } finally {
                                                                               if (jjtc001) {
                                                                                 jjtree.closeNodeScope(jjtn001,  2);
                                                                               }
        }
        break;
      default:
        jj_la1[31] = jj_gen;
        ;
      }
      break;
    case LPAREN:
      jj_consume_token(LPAREN);
      expression();
      jj_consume_token(RPAREN);
      jj_consume_token(DOT);
                                                                                       ASTDotExpression jjtn002 = new ASTDotExpression(JJTDOTEXPRESSION);
                                                                                       boolean jjtc002 = true;
                                                                                       jjtree.openNodeScope(jjtn002);
      try {
        classVar();
      } catch (Throwable jjte002) {
                                                                                       if (jjtc002) {
                                                                                         jjtree.clearNodeScope(jjtn002);
                                                                                         jjtc002 = false;
                                                                                       } else {
                                                                                         jjtree.popNode();
                                                                                       }
                                                                                       if (jjte002 instanceof RuntimeException) {
                                                                                         {if (true) throw (RuntimeException)jjte002;}
                                                                                       }
                                                                                       if (jjte002 instanceof ParseException) {
                                                                                         {if (true) throw (ParseException)jjte002;}
                                                                                       }
                                                                                       {if (true) throw (Error)jjte002;}
      } finally {
                                                                                       if (jjtc002) {
                                                                                         jjtree.closeNodeScope(jjtn002,  2);
                                                                                       }
      }
      break;
    default:
      jj_la1[32] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void identifier() throws ParseException {
 /*@bgen(jjtree) Identifier */
 ASTIdentifier jjtn000 = new ASTIdentifier(JJTIDENTIFIER);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(IDENTIFIER);
                           jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
                          jjtn000.tokenValue = t.image;
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void character() throws ParseException {
 /*@bgen(jjtree) Character */
 ASTCharacter jjtn000 = new ASTCharacter(JJTCHARACTER);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(STRING_LITERAL);
                               jjtree.closeNodeScope(jjtn000, true);
                               jjtc000 = false;
                              jjtn000.tokenValue = t.image;
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void integer() throws ParseException {
 /*@bgen(jjtree) Integer */
 ASTInteger jjtn000 = new ASTInteger(JJTINTEGER);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(INTEGER_LITERAL);
                                jjtree.closeNodeScope(jjtn000, true);
                                jjtc000 = false;
                               jjtn000.tokenValue = t.image;
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void rational() throws ParseException {
 /*@bgen(jjtree) Rational */
 ASTRational jjtn000 = new ASTRational(JJTRATIONAL);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(FLOATING_POINT_LITERAL);
                                       jjtree.closeNodeScope(jjtn000, true);
                                       jjtc000 = false;
                                      jjtn000.tokenValue = t.image;
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void bool() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
                                ASTTrue jjtn001 = new ASTTrue(JJTTRUE);
                                boolean jjtc001 = true;
                                jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(TRUE);
      } finally {
                                if (jjtc001) {
                                  jjtree.closeNodeScope(jjtn001, true);
                                }
      }
      break;
    case FALSE:
                    ASTFalse jjtn002 = new ASTFalse(JJTFALSE);
                    boolean jjtc002 = true;
                    jjtree.openNodeScope(jjtn002);
      try {
        jj_consume_token(FALSE);
      } finally {
                    if (jjtc002) {
                      jjtree.closeNodeScope(jjtn002, true);
                    }
      }
      break;
    default:
      jj_la1[33] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void pointers() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case THIS:
                                ASTThis jjtn001 = new ASTThis(JJTTHIS);
                                boolean jjtc001 = true;
                                jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(THIS);
      } finally {
                                if (jjtc001) {
                                  jjtree.closeNodeScope(jjtn001, true);
                                }
      }
      break;
    case GLOBAL:
                                ASTGlobal jjtn002 = new ASTGlobal(JJTGLOBAL);
                                boolean jjtc002 = true;
                                jjtree.openNodeScope(jjtn002);
      try {
        jj_consume_token(GLOBAL);
      } finally {
                                if (jjtc002) {
                                  jjtree.closeNodeScope(jjtn002, true);
                                }
      }
      break;
    default:
      jj_la1[34] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void nullliteral() throws ParseException {
                                ASTNullLiteral jjtn001 = new ASTNullLiteral(JJTNULLLITERAL);
                                boolean jjtc001 = true;
                                jjtree.openNodeScope(jjtn001);
    try {
      jj_consume_token(NULL);
    } finally {
                                if (jjtc001) {
                                  jjtree.closeNodeScope(jjtn001, true);
                                }
    }
  }

  final public void newobject() throws ParseException {
 /*@bgen(jjtree) NewObject */
  ASTNewObject jjtn000 = new ASTNewObject(JJTNEWOBJECT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(NEW);
      classVar();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        arglist();
        break;
      default:
        jj_la1[35] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void variable() throws ParseException {
 /*@bgen(jjtree) Variable */
 ASTVariable jjtn000 = new ASTVariable(JJTVARIABLE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(IDENTIFIER);
                           jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
                          jjtn000.tokenValue = t.image;
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void localvardef() throws ParseException {
 /*@bgen(jjtree) LocalVarDef */
  ASTLocalVarDef jjtn000 = new ASTLocalVarDef(JJTLOCALVARDEF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(DEF);
      identifier();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void lambda() throws ParseException {
 /*@bgen(jjtree) Lambda */
  ASTLambda jjtn000 = new ASTLambda(JJTLAMBDA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LAMBDA);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OF:
        jj_consume_token(OF);
        expression();
        break;
      default:
        jj_la1[36] = jj_gen;
        ;
      }
      jj_consume_token(COLON);
      parmlist();
      jj_consume_token(LBRACE);
      fnbody();
      jj_consume_token(RBRACE);
    } catch (Throwable jjte000) {
                                          if (jjtc000) {
                                            jjtree.clearNodeScope(jjtn000);
                                            jjtc000 = false;
                                          } else {
                                            jjtree.popNode();
                                          }
                                          if (jjte000 instanceof RuntimeException) {
                                            {if (true) throw (RuntimeException)jjte000;}
                                          }
                                          if (jjte000 instanceof ParseException) {
                                            {if (true) throw (ParseException)jjte000;}
                                          }
                                          {if (true) throw (Error)jjte000;}
    } finally {
                                          if (jjtc000) {
                                            jjtree.closeNodeScope(jjtn000, true);
                                          }
    }
  }

  final public void vectorliteral() throws ParseException {
 /*@bgen(jjtree) VectorLiteral */
  ASTVectorLiteral jjtn000 = new ASTVectorLiteral(JJTVECTORLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      sqrbracketlist();
    } catch (Throwable jjte000) {
                                          if (jjtc000) {
                                            jjtree.clearNodeScope(jjtn000);
                                            jjtc000 = false;
                                          } else {
                                            jjtree.popNode();
                                          }
                                          if (jjte000 instanceof RuntimeException) {
                                            {if (true) throw (RuntimeException)jjte000;}
                                          }
                                          if (jjte000 instanceof ParseException) {
                                            {if (true) throw (ParseException)jjte000;}
                                          }
                                          {if (true) throw (Error)jjte000;}
    } finally {
                                          if (jjtc000) {
                                            jjtree.closeNodeScope(jjtn000, true);
                                          }
    }
  }

  /** Generated Token Manager. */
  public XenonTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[37];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x6f7f3a00,0x6f7f3a00,0x6f7f3a00,0x0,0x0,0x6f7f3a00,0x0,0x400,0x0,0x0,0x6f270000,0x0,0x6f270000,0x0,0x6f270000,0x0,0x0,0x4000,0x8000,0x0,0x0,0x0,0x0,0x0,0x0,0x6f270000,0x0,0x0,0x0,0x6f260000,0x4f060000,0x0,0x0,0x60000,0x3000000,0x0,0x10000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x80001534,0x80001534,0x80001534,0x8000,0x20,0x80001534,0x100,0x0,0x8000,0x8000,0x80001134,0x8000,0x80001134,0x8000,0x80001134,0x380000,0x380000,0x0,0x0,0x1f800000,0x1f800000,0x80000000,0x80000000,0x0,0x0,0x80001134,0x10000,0x61100,0x61100,0x1134,0x1014,0x10000,0x120,0x0,0x0,0x100,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x1,0x1,0x1,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x1,0x0,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0xe,0xe,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }

  /** Constructor with InputStream. */
  public Xenon(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Xenon(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new XenonTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 37; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 37; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Xenon(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new XenonTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 37; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 37; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Xenon(XenonTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 37; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(XenonTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 37; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[68];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 37; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 68; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

                    }
